#!/usr/bin/python

import os, sys
from PyQt4 import QtCore, QtGui
import cdcui
import libvlc
from GoProController import GoProController
from Detector import Detector
from pymavlink import mavutil

class cdc(QtGui.QMainWindow, cdcui.Ui_MainWindow):

    def __init__(self, parent=None):
        super(cdc, self).__init__(parent)

        # video stream is initially paused
        self.isPaused = False

        # heart beat count; just so we know we're still communicating
        self.hrtCount = 0

        # max sequence number; used to terminate missions
        self.MAX_SEQ = 9

        # mission is not running initially
        self.isRunning = False

        # establish a connection the quadcopter
        # self.mvlnk = mavutil.mavlink_connection(device='/dev/ttyUSB0', baud=57600)

        # set up the GoProController object used for pulling static images
        # Ethernet Adapter is wlan0; USB Wi-Fi Adapter is wlan1
        # self.gpc = GoProController(device_name='wlan1')

        # set up the Detector object for testing images pulled from the GoPro
        self.d = Detector()

        # set up the UI generated by Qt/PyQt
        self.setupUi(self)

        # create and set up the VLC instance and associated media player
        self.instance = libvlc.Instance()
        self.mediaplayer = self.instance.media_player_new()
        self.setupVLC()

        # set up the telemetry window so it can periodically update with diagnostic info
        self.setupTelemetry()

        # set up the mission status window so it can continually update the mission's status
        self.setupMissionStatus()

        # set up the command console so it can process user input
        self.setupCmdCon()

    def setupVLC(self):
        """Set up the vlc frame, signals & slots"""
        # In this widget, the video will be drawn
        self.videoframe = QtGui.QFrame()
        self.palette = self.videoframe.palette()
        self.palette.setColor (QtGui.QPalette.Window, QtGui.QColor(0,0,0))
        self.videoframe.setPalette(self.palette)
        self.videoframe.setAutoFillBackground(True)

        self.hbuttonbox = QtGui.QHBoxLayout()
        self.playbutton = QtGui.QPushButton('Play')
        self.hbuttonbox.addWidget(self.playbutton)
        self.connect(self.playbutton, QtCore.SIGNAL('clicked()'), self.PlayPause)

        self.stopbutton = QtGui.QPushButton('Stop')
        self.hbuttonbox.addWidget(self.stopbutton)
        self.connect(self.stopbutton, QtCore.SIGNAL('clicked()'), self.Stop)

        self.hbuttonbox.addStretch(1)
        self.volumeslider = QtGui.QSlider(QtCore.Qt.Horizontal, self)
        self.volumeslider.setMaximum(100)
        self.volumeslider.setValue(100)
        self.volumeslider.setToolTip('Volume')
        self.hbuttonbox.addWidget(self.volumeslider)
        self.connect(self.volumeslider, QtCore.SIGNAL('valueChanged(int)'), self.setVolume)

        self.vboxlayout = QtGui.QVBoxLayout()
        self.vboxlayout.addWidget(self.videoframe)
        self.vboxlayout.addLayout(self.hbuttonbox)

        self.widgetVideoStream.setLayout(self.vboxlayout)

        self.vlcTimer = QtCore.QTimer(self)
        self.vlcTimer.setInterval(200)
        self.connect(self.vlcTimer, QtCore.SIGNAL('timeout()'), self.updateVLC)

    def setupTelemetry(self):
        """Set up the telemetry timer, signals & slots"""
        self.plainTextEditTelemetry.appendPlainText('SARS Copter:')
        self.plainTextEditTelemetry.appendPlainText('    Altitude:\t\t10.05m')
        self.plainTextEditTelemetry.appendPlainText('    Horz Speed:\t1.25m/s')
        self.plainTextEditTelemetry.appendPlainText('    Dist to WP:\t3.96m')
        self.plainTextEditTelemetry.appendPlainText('    GPS Lat:\t\t28.504916903354328')
        self.plainTextEditTelemetry.appendPlainText('    GPS Lon:\t\t-81.45773647818714')
        self.plainTextEditTelemetry.appendPlainText('    Heading:\t\t296.00 deg')
        self.plainTextEditTelemetry.appendPlainText('')
        self.plainTextEditTelemetry.appendPlainText('SARS Rover:')
        self.plainTextEditTelemetry.appendPlainText('    Ground Speed:\t0.00m/s')
        self.plainTextEditTelemetry.appendPlainText('    Ultrasonic Dist:\t1.83m')
        self.plainTextEditTelemetry.appendPlainText('    Dist to WP:\tN/A')
        self.plainTextEditTelemetry.appendPlainText('    GPS Lat:\t\t28.504920236742397')
        self.plainTextEditTelemetry.appendPlainText('    GPS Lon:\t\t-81.45761577878147')
        self.plainTextEditTelemetry.appendPlainText('    Heading:\t\t30.00 deg')

    def setupMissionStatus(self):
        self.plainTextEditMissionStatus.appendPlainText('Initiating Mission...')
        self.plainTextEditMissionStatus.appendPlainText('SARS Copter: traveling to waypoint 1')
        self.plainTextEditMissionStatus.appendPlainText('SARS Copter: waypoint 1 reached!')
        self.plainTextEditMissionStatus.appendPlainText('SARS Copter: capturing image')
        self.plainTextEditMissionStatus.appendPlainText('SARS Copter: image capture succeeded!')
        self.plainTextEditMissionStatus.appendPlainText('SARS Copter: traveling to waypoint 2')
        self.plainTextEditMissionStatus.appendPlainText('SARS Copter: waypoint 2 reached!')
        self.plainTextEditMissionStatus.appendPlainText('SARS Copter: capturing image')
        self.plainTextEditMissionStatus.appendPlainText('SARS Copter: image capture succeeded!')
        self.plainTextEditMissionStatus.appendPlainText('SARS Copter: traveling to waypoint 3')

    def setupCmdCon(self):
        self.connect(self.lineEditCommandConsole, QtCore.SIGNAL('returnPressed()'), self.processCmd)

    def PlayPause(self):
        """Toggle play/pause status"""
        if self.mediaplayer.is_playing():
            self.mediaplayer.pause()
            self.playbutton.setText('Play')
            self.isPaused = True
        else:
            if self.mediaplayer.play() == -1:
                # self.OpenURL('http://10.5.5.9:8080/live/amba.m3u8')
                self.OpenURL('http://www.nasa.gov/multimedia/nasatv/NTV-Public-IPS.m3u8')
                return
            while not self.mediaplayer.is_playing():
                self.mediaplayer.play()
            self.playbutton.setText('Pause')
            self.vlcTimer.start()
            self.isPaused = False

    def Stop(self):
        """Stop player"""
        self.mediaplayer.stop()
        self.playbutton.setText('Play')

    def OpenURL(self, url=None):
        """Open a URL in a MediaPlayer"""
        if url is None:
            url = QtGui.QInputDialog.getText(self, 'Enter URL', '', QtGui.QLineEdit.Normal, '')
            if  url[0] == '' or url[1] == False:
                return
            else:
                url = url[0]

        # create the media
        self.media = self.instance.media_new(unicode(url))

        # put the media in the media player
        self.mediaplayer.set_media(self.media)

        # parse the metadata of the file
        self.media.parse()

        # the media player has to be 'connected' to the QFrame
        # (otherwise a video would be displayed in it's own window)
        self.mediaplayer.set_xwindow(self.videoframe.winId())

        self.PlayPause()

    def setVolume(self, Volume):
        """Set the volume"""
        self.mediaplayer.audio_set_volume(Volume)

    def updateVLC(self):
        """updates the GoPro video feed"""
        if not self.mediaplayer.is_playing():
            # no need to call this function if nothing is played
            self.vlcTimer.stop()
            if not self.isPaused:
                # after the video finished, the play button stills shows
                # 'Pause', not the desired behavior of a media player
                # this will fix it
                self.Stop()

    def updateTelemetry(self):
        """updates the quadcopter and rover telemetry information"""
        self.mvlnk.param_fetch_one('HEARTBEAT')
        msg_hrt = self.mvlnk.recv_match(type='HEARTBEAT', blocking=False)
        if msg_hrt is not None:
            self.hrtCount += 1
        self.plainTextEditTelemetry.setPlainText('Heartbeats: ' + str(self.hrtCount))

    def processCmd(self):
        cmd = self.lineEditCommandConsole.text()
        if cmd == 'get-image':
            image = self.gpc.getImage('SARSGoPro', 'sarsgopro')
            if image:
                self.plainTextEditMissionStatus.appendPlainText('Image downloaded succeeded!')
            else:
                self.plainTextEditMissionStatus.appendPlainText('Image download failed.')
        elif cmd == 'test-image':
            test = self.d.detect('image.png')
            if test:
                self.plainTextEditMissionStatus.appendPlainText('Object detected!')
            else:
                self.plainTextEditMissionStatus.appendPlainText('Object not detected.')
        elif cmd == 'run-mission':
            if not self.isRunning:
                self.runMission()
        else:
            self.plainTextEditMissionStatus.appendPlainText('Unrecognized command.')

    def runMission(self):
        """start the show"""
        self.isRunning = True
        self.plainTextEditMissionStatus.appendPlainText('Initiating Mission...')
        while True:
            msg_nav = self.mvlnk.recv_match(type='NAV_CONTROLLER_OUTPUT', blocking=True, timeout=1)
            self.plainTextEditMissionStatus.appendPlainText('Waypoint Distance: ' + str(msg_nav.wp_dist))
            QtGui.qApp.processEvents()
        self.isRunning = False

if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    cdc = cdc()
    cdc.show()
    #cdc.gpc.connect('SARSGoPro', 'sarsgopro')
    sys.exit(app.exec_())
