#!/usr/bin/python

import os, sys, socket, string, time
from PyQt4 import QtCore, QtGui
import cdcui
import libvlc
from GoProController import GoProController
from Detector import Detector
from PIL import Image
from pymavlink import mavutil

class cdc(QtGui.QMainWindow, cdcui.Ui_MainWindow):

    def __init__(self, parent=None):
        super(cdc, self).__init__(parent)

        # video stream is initially paused
        self.isPaused = False

        # mission is not running initially
        self.isRunning = False

        # establish a connection the quadcopter
        print 'Opening telemetry radio connection...'
        self.quad = None
        for i in range(0,5):
            tty = '/dev/ttyUSB' + str(i)
            try:
                self.quad = mavutil.mavlink_connection(device=tty, baud=57600)
            except:
                print 'No telemetry radio on ' + tty
            if self.quad:
                print 'Telemetry radio found on ' + tty
                break
        if self.quad is None:
            print 'Could not open telemetry radio connection'
            return

        # min and max sequence number
        # determines when to start and stop capturing images
        self.quad.MIN_WP_SEQ = 1
        self.quad.MAX_WP_SEQ = 90

        # CC3100 connection information
        self.host = '192.168.1.1'
        self.port = 7277

        # set up the GoProController object used for pulling static images
        # Ethernet Adapter is wlan0; USB Wi-Fi Adapter is wlan1
        self.gpc = GoProController(device_name='wlan0')
        self.gpc.connect('SARSGoPro', 'sarsgopro')

        # set up the Detector object for testing images pulled from the GoPro
        self.det = Detector()

        # set up the UI generated by Qt/PyQt
        self.setupUi(self)

        # create and set up the VLC instance and associated media player
        self.instance = libvlc.Instance()
        self.mediaplayer = self.instance.media_player_new()
        self.setupVLC()

        # set up the telemetry window so it can periodically update with diagnostic info
        self.setupTelemetry()

        # set up the command console so it can process user input
        self.setupCmdCon()

    def setupVLC(self):
        """Set up the vlc frame, signals & slots"""
        # In this widget, the video will be drawn
        self.videoframe = QtGui.QFrame()
        self.palette = self.videoframe.palette()
        self.palette.setColor (QtGui.QPalette.Window, QtGui.QColor(0,0,0))
        self.videoframe.setPalette(self.palette)
        self.videoframe.setAutoFillBackground(True)

        self.hbuttonbox = QtGui.QHBoxLayout()
        self.playbutton = QtGui.QPushButton('Play')
        self.hbuttonbox.addWidget(self.playbutton)
        self.connect(self.playbutton, QtCore.SIGNAL('clicked()'), self.PlayPause)

        self.stopbutton = QtGui.QPushButton('Stop')
        self.hbuttonbox.addWidget(self.stopbutton)
        self.connect(self.stopbutton, QtCore.SIGNAL('clicked()'), self.Stop)

        self.hbuttonbox.addStretch(1)
        self.volumeslider = QtGui.QSlider(QtCore.Qt.Horizontal, self)
        self.volumeslider.setMaximum(100)
        self.volumeslider.setValue(100)
        self.volumeslider.setToolTip('Volume')
        self.hbuttonbox.addWidget(self.volumeslider)
        self.connect(self.volumeslider, QtCore.SIGNAL('valueChanged(int)'), self.setVolume)

        self.vboxlayout = QtGui.QVBoxLayout()
        self.vboxlayout.addWidget(self.videoframe)
        self.vboxlayout.addLayout(self.hbuttonbox)

        self.widgetVideoStream.setLayout(self.vboxlayout)

        self.vlcTimer = QtCore.QTimer(self)
        self.vlcTimer.setInterval(200)
        self.connect(self.vlcTimer, QtCore.SIGNAL('timeout()'), self.updateVLC)

    def setupTelemetry(self):
        """Set up the telemetry timer, signals & slots"""
        self.telemTimer = QtCore.QTimer(self)
        self.telemTimer.setInterval(1000)
        self.connect(self.telemTimer, QtCore.SIGNAL('timeout()'), self.updateTelemetry)
        self.telemTimer.start()

    def setupCmdCon(self):
        self.connect(self.lineEditCommandConsole, QtCore.SIGNAL('returnPressed()'), self.processCmd)

    def PlayPause(self):
        """Toggle play/pause status"""
        if self.mediaplayer.is_playing():
            self.mediaplayer.pause()
            self.playbutton.setText('Play')
            self.isPaused = True
        else:
            if self.mediaplayer.play() == -1:
                self.OpenURL('http://10.5.5.9:8080/live/amba.m3u8')
                return
            while not self.mediaplayer.is_playing():
                self.mediaplayer.play()
            self.playbutton.setText('Pause')
            self.vlcTimer.start()
            self.isPaused = False

    def Stop(self):
        """Stop player"""
        self.mediaplayer.stop()
        self.playbutton.setText('Play')

    def OpenURL(self, url=None):
        """Open a URL in a MediaPlayer"""
        if url is None:
            url = QtGui.QInputDialog.getText(self, 'Enter URL', '', QtGui.QLineEdit.Normal, '')
            if  url[0] == '' or url[1] == False:
                return
            else:
                url = url[0]

        # create the media
        self.media = self.instance.media_new(unicode(url))

        # put the media in the media player
        self.mediaplayer.set_media(self.media)

        # parse the metadata of the file
        self.media.parse()

        # the media player has to be 'connected' to the QFrame
        # (otherwise a video would be displayed in it's own window)
        self.mediaplayer.set_xwindow(self.videoframe.winId())

        self.PlayPause()

    def setVolume(self, Volume):
        """Set the volume"""
        self.mediaplayer.audio_set_volume(Volume)

    def updateVLC(self):
        """updates the GoPro video feed"""
        if not self.mediaplayer.is_playing():
            # no need to call this function if nothing is played
            self.vlcTimer.stop()
            if not self.isPaused:
                # after the video finished, the play button stills shows
                # 'Pause', not the desired behavior of a media player
                # this will fix it
                self.Stop()

    def updateTelemetry(self):
        """updates the quadcopter and rover telemetry information"""
        # get quadcopter telemetry
        self.quad.gpi = self.quad.recv_match(type='GLOBAL_POSITION_INT', blocking=False)
        if self.quad.gpi is not None:
            self.plainTextEditTelemetry.setPlainText('Quadcopter:')
            self.plainTextEditTelemetry.appendPlainText('Latitude:\t\t' + str(self.quad.gpi.lat / 10000000.0))
            self.plainTextEditTelemetry.appendPlainText('Longitude:\t\t' + str(self.quad.gpi.lon / 10000000.0))
            self.plainTextEditTelemetry.appendPlainText('Heading:\t\t' + str(self.quad.gpi.hdg / 100.0))
            self.plainTextEditTelemetry.appendPlainText('Altitude:\t\t' + str(self.quad.gpi.relative_alt / 1000.0))
            self.plainTextEditTelemetry.appendPlainText('Velocity (X):\t' + str(self.quad.gpi.vx))
            self.plainTextEditTelemetry.appendPlainText('Velocity (Y):\t' + str(self.quad.gpi.vy))
            self.plainTextEditTelemetry.appendPlainText('Velocity (Z):\t' + str(self.quad.gpi.vz))

        # get rover telemetry
        self.rover_speed = self.sendTCP('s')
        self.rover_ping_dist = self.sendTCP('p')
        self.rover_wp_dist = self.sendTCP('d')
        self.rover_gps_lat = self.sendTCP('a')
        self.rover_gps_lon = self.sendTCP('o')
        self.rover_heading = self.sendTCP('h')

        self.plainTextEditTelemetry.appendPlainText('Rover:')
        self.plainTextEditTelemetry.appendPlainText('Speed:\t\t' + self.rover_speed)
        self.plainTextEditTelemetry.appendPlainText('Clearance:\t\t' + self.rover_ping_dist)
        self.plainTextEditTelemetry.appendPlainText('Waypoint Distance:\t' + self.rover_wp_dist)
        self.plainTextEditTelemetry.appendPlainText('Latitude:\t\t'+ self.rover_gps_lat)
        self.plainTextEditTelemetry.appendPlainText('Longitude:\t\t' + self.rover_gps_lon)
        self.plainTextEditTelemetry.appendPlainText('Heading:\t\t' + self.rover_heading)

    def processCmd(self):
        cmd = self.lineEditCommandConsole.text()
        if cmd == 'get-image':
            image = self.gpc.getImage('SARSGoPro', 'sarsgopro')
            if image:
                self.plainTextEditMissionStatus.appendPlainText('Image downloaded succeeded!')
            else:
                self.plainTextEditMissionStatus.appendPlainText('Image download failed.')
        elif cmd == 'test-image':
            test = self.det.detect('image.png')
            if test:
                self.plainTextEditMissionStatus.appendPlainText('Object detected!')
            else:
                self.plainTextEditMissionStatus.appendPlainText('Object not detected.')
        elif cmd == 'run':
            if not self.isRunning:
                self.runMission()
        elif cmd == 'sendwp1':
            self.plainTextEditMissionStatus.appendPlainText('Sending Waypoint 1 to the Rover...')
            msg = self.sendTCP('1')
            self.plainTextEditMissionStatus.appendPlainText('Rover status: ' + msg)
        elif cmd == 'sendwp2':
            self.plainTextEditMissionStatus.appendPlainText('Sending Waypoint 2 to the Rover...')
            msg = self.sendTCP('2')
            self.plainTextEditMissionStatus.appendPlainText('Rover status: ' + msg)
        elif cmd == 'sendwp3':
            self.plainTextEditMissionStatus.appendPlainText('Sending Waypoint 3 to the Rover...')
            msg = self.sendTCP('3')
            self.plainTextEditMissionStatus.appendPlainText('Rover status: ' + msg)
        elif cmd == 'sendwp4':
            self.plainTextEditMissionStatus.appendPlainText('Sending Waypoint 4 to the Rover...')
            msg = self.sendTCP('4')
            self.plainTextEditMissionStatus.appendPlainText('Rover status: ' + msg)
        elif cmd == 'sendwp5':
            self.plainTextEditMissionStatus.appendPlainText('Sending Waypoint 5 to the Rover...')
            msg = self.sendTCP('5')
            self.plainTextEditMissionStatus.appendPlainText('Rover status: ' + msg)
        elif cmd == 'sendwp6':
            self.plainTextEditMissionStatus.appendPlainText('Sending Waypoint 6 to the Rover...')
            msg = self.sendTCP('6')
            self.plainTextEditMissionStatus.appendPlainText('Rover status: ' + msg)
        else:
            self.plainTextEditMissionStatus.appendPlainText('Unrecognized command.')
        self.lineEditCommandConsole.setText('')

    def runMission(self):
        """start the show"""
        self.isRunning = True
        self.plainTextEditMissionStatus.appendPlainText('Initiating Mission...')
        QtGui.QApplication.processEvents()

        # create an array to store all pulled images
        self.imgs = []

        # fetch the initial sequence number
        msg = self.quad.recv_match(type='MISSION_CURRENT', blocking=True)
        self.quad.current_seq = msg.seq
        self.plainTextEditMissionStatus.appendPlainText('Starting Sequence Number: ' + str(self.quad.current_seq))
        QtGui.QApplication.processEvents()

        # loop until we've made it past the takeoff sequence
        in_takeoff_seq = True
        while in_takeoff_seq:
            msg = self.quad.recv_match(type='MISSION_CURRENT', blocking=True)
            self.quad.current_seq = msg.seq
            if self.quad.current_seq < self.quad.MIN_WP_SEQ:
                self.plainTextEditMissionStatus.appendPlainText('Waiting until takeoff has finished... Current Sequence: ' + str(self.quad.current_seq))
                QtGui.QApplication.processEvents()
            else:
                in_takeoff_seq = False
                self.plainTextEditMissionStatus.appendPlainText('Takeoff finished! Current Sequence: ' + str(self.quad.current_seq))
                QtGui.QApplication.processEvents()

        # loop through waypoint sequences until we reach the landing sequence
        failed = False
        in_waypoint_seq = True
        while not failed and in_waypoint_seq:
            if self.quad.current_seq == 2 or self.quad.current_seq == 32 or self.quad.current_seq == 62:
               # wait until we've reached the waypoint
                msg = self.quad.recv_match(type='NAV_CONTROLLER_OUTPUT', blocking=True)
                while msg.wp_dist > 0:
                    msg = self.quad.recv_match(type='NAV_CONTROLLER_OUTPUT', blocking=True)
                    self.plainTextEditMissionStatus.appendPlainText('Waypoint Distance: ' + str(msg.wp_dist))
                    QtGui.QApplication.processEvents()
                self.plainTextEditMissionStatus.appendPlainText('Waypoint reached!')
                QtGui.QApplication.processEvents()

                # wait 3 seconds, then capture an image from the GoPro
                self.plainTextEditMissionStatus.appendPlainText('Waiting 2 seconds...')
                for i in range(1,3):
                    time.sleep(1)
                    self.plainTextEditMissionStatus.appendPlainText(str(i))
                    QtGui.QApplication.processEvents()
                self.plainTextEditMissionStatus.appendPlainText('Capturing image...')
                img = self.gpc.getImage('SARSGoPro', 'sarsgopro')
                if img:
                    im = Image.open('image.png')
                    pix = im.load()
                    self.imgs.append(pix)
                    self.plainTextEditMissionStatus.appendPlainText('Image capture succeeded!')
                    QtGui.QApplication.processEvents()
                else:
                    failed = True
                    self.plainTextEditMissionStatus.appendPlainText('Image capture failed. Abort mission.')
                    QtGui.QApplication.processEvents()
                    return

            # wait for the sequence number to increment
            incremented = False
            while not incremented:
                msg = self.quad.recv_match(type='MISSION_CURRENT', blocking=True)
                if self.quad.current_seq == msg.seq:
                    self.plainTextEditMissionStatus.appendPlainText('Waiting for sequence number to increment...')
                    QtGui.QApplication.processEvents()
                else:
                    self.quad.current_seq = msg.seq
                    incremented = True
                    self.plainTextEditMissionStatus.appendPlainText('Sequence number incremented! Current Sequence Number: ' + str(self.quad.current_seq))
                    QtGui.QApplication.processEvents()

            if self.quad.current_seq >= self.quad.MAX_WP_SEQ:
                in_waypoint_seq = False
                self.plainTextEditMissionStatus.appendPlainText('All waypoints visited!')
                QtGui.QApplication.processEvents()

        # run the object detection the images
        if not failed:
            self.plainTextEditMissionStatus.appendPlainText('Running object detection..')
            QtGui.QApplication.processEvents()
            found = False
            for pix in self.imgs:
                if(self.det.detect(pix)):
                    found = True
                    self.plainTextEditMissionStatus.appendPlainText('Object detected at waypoint ' + str(self.imgs.index(pix) + 1) + '!')
                    QtGui.QApplication.processEvents()
                    self.plainTextEditMissionStatus.appendPlainText('Sending waypoint ' + str(self.imgs.index(pix) + 1) + ' to the rover...')
                    QtGui.QApplication.processEvents()
                    self.sendTCP(str(self.imgs.index(pix)+1))
                    break

            if not found:
                self.plainTextEditMissionStatus.appendPlainText('Object not detected.')
                QtGui.QApplication.processEvents()
                self.isRunning = False

    def sendTCP(self, str):
        try:
            s = socket.socket()
            s.connect((self.host, self.port))
            s.settimeout(0.5)
            s.send(str)
            for i in range (0,500):
                time.sleep(0.001)
                QtGui.QApplication.processEvents()
            msg = s.recv(2**10)
            QtGui.QApplication.processEvents()
            msg = msg.rstrip()
            s.close()
            return msg
        except Exception as e:
            print e

if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    cdc = cdc()
    cdc.show()
    sys.exit(app.exec_())
